创建 spring-cloud-config-client项目，项目位置：VIP课/spring-cloud/lesson-1/spring-cloud-config-client；
java.util.Observerable：发布者；
java.util.Observer：订阅者；
创建 com.gupao.springcloudconfigclient.demo.ObserverDemo类，使用观察者模式；
推模式：将数据推给其他方法；
拉模式：主动拉取数据；
---
java事件/监听模式：
java.util.EventObject：事件对象，一般事件里面封装事件源 EventSource和事件类型 type；
java.util.EventListener：事件监听接口(标记)；
---
spring事件/监听模式：
ApplicationEvent extends EventObject；
ApplicationListener extends EventListener；
创建 com.gupao.springcloudconfigclient.demo.SpringEventListenerDemo类，观察spring中事件监听；
---
springboot核心事件：
1、ApplicationEnvironmentPreparedEvent：封装了SpringApplication和ConfigurableEnvironment
SpringApplication.run(args)方法返回上下文 ConfigurableApplicationContext；
选中 ApplicationEnvironmentPreparedEvent，右键 Find Usages，看一下这个类在哪里被使用了，发现在很多地方被使用了，例如：
ConfigFileApplicationListener类的onApplicationEvent(ApplicationEvent event)方法；
ConfigFileApplicationListener类是管理配置文件 application.yml的；其中supportsEventType(Class<? extends ApplicationEvent> eventType)方法
public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {
    //  isAssignableFrom：a对象所对应类信息是b对象所对应的类信息的父类或者是父接口
    return ApplicationEnvironmentPreparedEvent.class.isAssignableFrom(eventType)
            || ApplicationPreparedEvent.class.isAssignableFrom(eventType);
}
表示判断支持的事件类型，此次只支持；
跟onApplicationEnvironmentPreparedEvent()方法中的postProcessEnvironment()方法：
@Override
public void postProcessEnvironment(ConfigurableEnvironment environment,SpringApplication application) {
    // getResourceLoader()加载 application.yml或者application.properties
    addPropertySources(environment, application.getResourceLoader());
}
配置文件application.yml或者application.properties就是由ConfigFileApplicationListener类加载的，那么什么时候加载的呢？
选中 ConfigFileApplicationListener类，右键 Find Usages，找到 Value read，找到spring.factories
2、ApplicationPreparedEvent
3、ApplicationStartingEvent
4、ApplicationReadyEvent
5、ApplicationFailedEvent

每个监听器监听一种类型事件，当上下文发布事件1时 context.publishEvent(event1)，监听event1的监听器监听方法
自动执行，那么多个事件，多个监听方法，顺序如何控制呢？？
1、监听器类实现 Ordered接口复写getOrder()方法：ConfigFileApplicationListener implements Ordered；
public int getOrder() {return this.order;}
2、监听器类使用 @Ordered注解；

重点：BootstrapApplicationListener类负责加载 bootstrap.yml文件
